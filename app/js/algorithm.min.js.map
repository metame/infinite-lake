{"version":3,"sources":["algorithm.js"],"names":["calculateSteps","target","bucket1","bucket2","gcd","a","b","temp","firstAlgorithm","lgBucket","smBucket","firstAlg","id","steps","count","sequence","vol","size","lgInit","pour","lgDiff","push","lgVol","description","smVol","dump","fill","sequenceSteps","runSequence","concat","length","tbucket","secondAlgorithm","secondAlg","smInit","smDiff","success","cycle","i","console","log","parseInt","impossible","errCapacity","result","message","bucket","this","thatBucket","Object","create","name","algorithms"],"mappings":"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","file":"algorithm.min.js","sourcesContent":["'use strict';\n// front-end version that returns an object with the results\n\nfunction calculateSteps(target, bucket1, bucket2){\n    // convert string to number\n    target = parseInt(target, 10);\n    bucket1 = parseInt(bucket1, 10);\n    bucket2 = parseInt(bucket2, 10);\n    \n    var impossible = \"Your target can't be reached. Either change your target or your bucket sizes!\",\n        errCapacity = \"One of your buckets has to have enough room for how much water you want!\",\n        success = \"You have \" + target + \"L of water\",\n        result = {success: false};\n    \n    if(target > bucket1 && target > bucket2){  // target is larger than buckets\n    \n        result.success = false;\n        result.message = errCapacity;\n        \n        console.log(result);\n        return result;\n        \n    } else {\n        \n        if( target % gcd(bucket1, bucket2) !== 0 ){\n            \n            result.success = false;\n            result.message = impossible;\n            console.log(result);\n            return result;\n            \n        } else {\n        \n            // create bucket object\n            var bucket = {};\n            \n            bucket.fill = function(){\n                this.vol = this.size;\n            };\n            \n            bucket.dump = function(){\n                this.vol = 0;\n            };\n            \n            bucket.pour = function(thatBucket, steps){\n                if(this.vol > thatBucket.size - thatBucket.vol ){ // source vol greater than target capacity\n                    this.vol -= thatBucket.size - thatBucket.vol;\n                    thatBucket.vol = thatBucket.size;\n                } else {\n                    thatBucket.vol += this.vol;\n                    this.dump();\n                }\n            };\n            \n            // create lg & sm buckets objects & assign values\n            var lgBucket = Object.create(bucket),\n                smBucket = Object.create(bucket);\n                \n            \n                \n            if(bucket1 > bucket2){ // bucket 1 is larger\n                \n                lgBucket.name = \"first bucket\",\n                lgBucket.size = bucket1,\n                lgBucket.vol = 0,\n                \n                smBucket.name = \"second bucket\",\n                smBucket.size = bucket2,\n                smBucket.vol = 0;\n                \n            } else { // bucket 2 is larger\n            \n                lgBucket.name = \"second bucket\",\n                lgBucket.size = bucket2,\n                lgBucket.vol = 0,\n                \n                smBucket.name = \"first bucket\",\n                smBucket.size = bucket1,\n                smBucket.vol = 0;\n                \n            }\n            \n            var firstAlg = firstAlgorithm(target, lgBucket, smBucket);\n            var secondAlg = secondAlgorithm(target, lgBucket, smBucket);\n            \n            if( firstAlg.success === true || secondAlg.success === true) {\n                result.success = true;\n                result.message = success;\n            }\n            \n            result.algorithms = [firstAlg, secondAlg];\n            console.log(result);\n            return result;\n            \n        }\n    }\n    \n    // define functions\n    function gcd(a,b) {\n        if (a < 0) a = -a;\n        if (b < 0) b = -b;\n        if (b > a) {var temp = a; a = b; b = temp;}\n        while (true) {\n            if (b == 0) return a;\n            a %= b;\n            if (a == 0) return b;\n            b %= a;\n        }\n    }\n    \n    function firstAlgorithm(target, lgBucket, smBucket){\n        \n        var firstAlg = {\n            id: 1,\n            steps: [],\n            count: 0\n        };\n        \n        \n        //   ****  Algorithm 1 sequence ****\n        //         1. Fill lgBucket\n        //         2. Until lgBucket.vol is less than smBucket: Pour lgBucket into smBucket then dump smBucket\n        //         3. Pour lgBucket into smBucket\n        //         4. Fill lgBucket\n        //         Repeat until target is reached\n        \n        \n    \n        var sequence = [\n            function(steps){ \n                while( lgBucket.vol >= smBucket.size ) {\n                    var lgInit = lgBucket.vol;\n                    lgBucket.pour(smBucket);\n                    var lgDiff = lgInit - lgBucket.vol;\n                    \n                    steps.push({lgVol: lgBucket.vol, description: \"Pour \" + lgDiff + \"L of water from the \" + lgBucket.size + \"L bucket into the \" + smBucket.size + \"L bucket\", smVol: smBucket.vol});\n                    if(lgBucket.vol === target || smBucket.vol === target){\n                        break;\n                    }\n                    \n                    smBucket.dump()\n                    steps.push({lgVol: lgBucket.vol, description: \"Dump the \" + smBucket.size + \"L bucket\", smVol: smBucket.vol});\n                }\n            },\n            function(steps){\n                var lgInit = lgBucket.vol;\n                lgBucket.pour(smBucket);\n                var lgDiff = lgInit - lgBucket.vol;\n                \n                steps.push({lgVol: lgBucket.vol, description: \"Pour \" + lgDiff + \"L of water from the \" + lgBucket.size + \"L bucket into the \" + smBucket.size + \"L bucket\", smVol: smBucket.vol});\n            },\n            function(steps){\n                lgBucket.fill();\n                steps.push({lgVol: lgBucket.vol, description: \"Fill the \" + lgBucket.size + \"L bucket\", smVol: smBucket.vol});\n            }\n        ];\n    \n        // make sure buckets are empty\n        lgBucket.dump();\n        smBucket.dump();\n        \n        \n        // first fill\n        lgBucket.fill();\n        \n        firstAlg.steps.push({lgVol: lgBucket.vol, description: \"Fill the \" + lgBucket.size + \"L bucket\", smVol: smBucket.vol});\n        \n    \n        var sequenceSteps = runSequence(sequence); // get steps from sequence\n        firstAlg.steps = firstAlg.steps.concat(sequenceSteps); // add sequence steps to initial fill step\n        firstAlg.count = firstAlg.steps.length; // assign step count to object\n        \n        if(smBucket.vol === target){\n            firstAlg.tbucket = smBucket.size + \"L\";\n        } else {\n            firstAlg.tbucket = lgBucket.size + \"L\";\n        }\n        \n        return firstAlg;\n    }\n    \n    function secondAlgorithm(target, lgBucket, smBucket){\n        var secondAlg = {\n            id: 2,\n            steps: [],\n            count: 0\n        };\n        \n        // **** Algorithm 2 sequence ****\n        //      1. Until lgBucket is full: Fill smBucket and pour smBucket into lgBucket\n        //      2. Dump the lgBucket\n        //      3. Pour the smBucket into lgBucket\n        //      Repeat until target is reached\n        \n        var sequence = [\n            function(steps){\n                while(lgBucket.vol !== lgBucket.size){\n                    \n                    smBucket.fill();\n                    \n                    steps.push({lgVol: lgBucket.vol, description:  \"Fill the \" + smBucket.size + \"L bucket with \" + smBucket.size + \"L of water\", smVol: smBucket.vol});\n                    if(lgBucket.vol === target || smBucket.vol === target){\n                        break;\n                    }\n                    \n                    var smInit = smBucket.vol;\n                    smBucket.pour(lgBucket);\n                    var smDiff = smInit - smBucket.vol;\n                    \n                    steps.push({lgVol: lgBucket.vol, description:  \"Pour \" + smDiff + \"L of water from the \" + smBucket.size + \"L bucket into the \" + lgBucket.size + \"L bucket\", smVol: smBucket.vol});\n                    if(lgBucket.vol === target || smBucket.vol === target){\n                        break;\n                    }\n                }\n            },\n            function(steps){ \n                lgBucket.dump(); \n                steps.push({lgVol: lgBucket.vol, description:  \"Dump the \" + lgBucket.size + \"L bucket\", smVol: smBucket.vol});\n            },\n            function(steps){ \n                var smInit = smBucket.vol;\n                smBucket.pour(lgBucket); \n                var smDiff = smInit - smBucket.vol;\n                steps.push({lgVol: lgBucket.vol, description:  \"Pour \" + smDiff + \"L of water from the \" + smBucket.size + \"L bucket into the \" + lgBucket.size + \"L bucket\", smVol: smBucket.vol});\n            }\n        ];\n        \n        // make sure buckets are empty\n        lgBucket.dump();\n        smBucket.dump();\n        \n        var steps = runSequence(sequence); // get Steps from sequence\n        secondAlg.steps = steps;\n        secondAlg.count = steps.length; // count of how many steps solution took\n        secondAlg.success = true;\n        \n        if(smBucket.vol === target){\n            secondAlg.tbucket = smBucket.size + \"L\";\n        } else {\n            secondAlg.tbucket = lgBucket.size + \"L\";\n        }\n        return secondAlg;\n        \n    }\n    \n    function runSequence(sequence){\n        var cycle = 0,\n            steps = [];\n            \n            \n        for(var i=0; i<sequence.length; i++){\n            \n            // check if target has been met\n            if(lgBucket.vol === target || smBucket.vol === target){\n                console.log(success);\n                break;\n            }\n            \n            // run next function in sequence\n            sequence[i](steps);\n            \n            // rerun sequence if target not found\n            if(i === sequence.length - 1){\n                i = -1;\n            }\n            \n            // prevent infinite loop\n            cycle++;\n            if(cycle === 1000){\n                break;\n            }\n            \n        }\n        \n        return steps;\n    }\n}\n\n\n\n"],"sourceRoot":"/source/"}